#include <string>

#include <gtest/gtest.h>
#include <derivejson/derivejson.hpp>

#include "testing_models.hpp"

namespace tests {
    using json = nlohmann::json;

class Tester : public ::testing::Test {};

//------------------------------------------------------------------------------
/**
 * @brief Auto generate JSON serializer and deserializer
 */
TEST_F(Tester, AutoGenerate) {
    models::Vin vin_expected{"0x12312", 3};

    ASSERT_TRUE(vin_expected.transaction_id == "0x12312");
    ASSERT_TRUE(vin_expected.vout == 3);

    std::string json_str = "{\"txid\":\"0x12312\",\"vout\":3}";
    json j = json::parse(json_str);
    models::Vin vin_deserialize = j;

    ASSERT_TRUE(vin_deserialize == vin_expected);

    json j_serialize = vin_expected;

    ASSERT_TRUE(j_serialize.dump() == json_str);
}

//------------------------------------------------------------------------------
/**
 * @brief Auto generate JSON serializer and deserializer without equal overload
 */
TEST_F(Tester, AutoGenerateWithoutOverload) {
    std::string json_str = "{\"txid\":\"0x12312\",\"vout\":3}";
    json j = json::parse(json_str);
    models::VinJSON vin_deserialize = j;
    json j_serialize = vin_deserialize;

    ASSERT_TRUE(j_serialize.dump() == json_str);
}

//------------------------------------------------------------------------------
/**
 * @brief Auto generate JSON serializer
 */
TEST_F(Tester, AutoGenerateSerializer) {
    models::VinToJSON vin_expected{"0x12312", 3};

    ASSERT_TRUE(vin_expected.transaction_id == "0x12312");
    ASSERT_TRUE(vin_expected.vout == 3);

    std::string json_str = "{\"txid\":\"0x12312\",\"vout\":3}";
    json j_serialize = vin_expected;

    ASSERT_TRUE(j_serialize.dump() == json_str);
}

//------------------------------------------------------------------------------
/**
 * @brief Auto generate JSON deserializer
 */
TEST_F(Tester, AutoGenerateDeserializer) {
    models::VinFromJSON vin_expected{"0x12312", 3};

    ASSERT_TRUE(vin_expected.transaction_id == "0x12312");
    ASSERT_TRUE(vin_expected.vout == 3);

    std::string json_str = "{\"txid\":\"0x12312\",\"vout\":3}";
    json j = json::parse(json_str);
    models::VinFromJSON vin_deserialize = j;

    ASSERT_TRUE(vin_deserialize == vin_expected);
}

//------------------------------------------------------------------------------
/**
 * @brief Auto generate JSON serializer without equal overload
 */
TEST_F(Tester, AutoGenerateSerializerWithoutOverload) {
    models::VinToJSONRaw vin_expected{"0x12312", 3};

    ASSERT_TRUE(vin_expected.transaction_id == "0x12312");
    ASSERT_TRUE(vin_expected.vout == 3);

    std::string json_str = "{\"txid\":\"0x12312\",\"vout\":3}";
    json j_serialize = vin_expected;

    ASSERT_TRUE(j_serialize.dump() == json_str);
}

//------------------------------------------------------------------------------
/**
 * @brief Auto generate JSON deserializer without equal overload
 */
TEST_F(Tester, AutoGenerateDeserializerWithoutOverload) {
    std::string json_str = "{\"txid\":\"0x12312\",\"vout\":3}";
    json j = json::parse(json_str);
    models::VinFromJSONRaw vin_deserialize = j;

    ASSERT_TRUE(vin_deserialize.transaction_id == "0x12312");
    ASSERT_TRUE(vin_deserialize.vout == 3);
}

} /* namespace tests */

//------------------------------------------------------------------------------

int main(int argc, char **argv) {

    ::testing::InitGoogleTest(&argc, argv);

    return RUN_ALL_TESTS();
}

